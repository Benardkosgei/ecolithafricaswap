{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { createClient } from '@supabase/supabase-js';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL || 'YOUR_SUPABASE_URL';\nvar supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || 'YOUR_SUPABASE_ANON_KEY';\nexport var supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false\n  }\n});\nexport var initializeSupabase = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      console.log('Supabase initialized successfully');\n    } catch (error) {\n      console.error('Error initializing Supabase:', error);\n    }\n  });\n  return function initializeSupabase() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["createClient","AsyncStorage","supabaseUrl","process","env","EXPO_PUBLIC_SUPABASE_URL","supabaseAnonKey","EXPO_PUBLIC_SUPABASE_ANON_KEY","supabase","auth","storage","autoRefreshToken","persistSession","detectSessionInUrl","initializeSupabase","_ref","_asyncToGenerator","console","log","error","apply","arguments"],"sources":["C:/Users/User/Desktop/Ecolith Promps/V3/EcolithSwap/src/services/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Supabase configuration\nconst supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL || 'YOUR_SUPABASE_URL';\nconst supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || 'YOUR_SUPABASE_ANON_KEY';\n\n// Create Supabase client with AsyncStorage for session persistence\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n  },\n});\n\nexport const initializeSupabase = async () => {\n  try {\n    // Initialize database tables if needed\n    console.log('Supabase initialized successfully');\n  } catch (error) {\n    console.error('Error initializing Supabase:', error);\n  }\n};\n\n// Database table schemas for reference:\n/*\n  -- Users table (handled by Supabase Auth)\n  -- Extended user profiles\n  CREATE TABLE user_profiles (\n    id UUID PRIMARY KEY REFERENCES auth.users(id),\n    full_name TEXT,\n    phone TEXT,\n    location TEXT,\n    total_swaps INTEGER DEFAULT 0,\n    plastic_recycled DECIMAL DEFAULT 0,\n    co2_saved DECIMAL DEFAULT 0,\n    money_saved DECIMAL DEFAULT 0,\n    current_points INTEGER DEFAULT 0,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n  );\n\n  -- Battery swap stations\n  CREATE TABLE stations (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    name TEXT NOT NULL,\n    address TEXT NOT NULL,\n    latitude DECIMAL NOT NULL,\n    longitude DECIMAL NOT NULL,\n    station_type TEXT NOT NULL CHECK (station_type IN ('swap', 'charge', 'both')),\n    available_batteries INTEGER DEFAULT 0,\n    total_slots INTEGER DEFAULT 0,\n    is_active BOOLEAN DEFAULT true,\n    accepts_plastic BOOLEAN DEFAULT true,\n    self_service BOOLEAN DEFAULT false,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n  );\n\n  -- Battery rentals\n  CREATE TABLE battery_rentals (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id UUID REFERENCES auth.users(id),\n    station_id UUID REFERENCES stations(id),\n    battery_id TEXT NOT NULL,\n    start_time TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    end_time TIMESTAMP WITH TIME ZONE,\n    cost DECIMAL,\n    payment_status TEXT DEFAULT 'pending',\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n  );\n\n  -- Plastic waste logs\n  CREATE TABLE plastic_waste_logs (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id UUID REFERENCES auth.users(id),\n    station_id UUID REFERENCES stations(id),\n    weight_kg DECIMAL NOT NULL,\n    points_earned INTEGER NOT NULL,\n    logged_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n  );\n\n  -- Payments\n  CREATE TABLE payments (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id UUID REFERENCES auth.users(id),\n    rental_id UUID REFERENCES battery_rentals(id),\n    amount DECIMAL NOT NULL,\n    currency TEXT DEFAULT 'KES',\n    payment_method TEXT NOT NULL,\n    payment_reference TEXT,\n    status TEXT DEFAULT 'pending',\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n  );\n*/\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,uBAAuB;AACpD,OAAOC,YAAY,MAAM,2CAA2C;AAGpE,IAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,mBAAmB;AAC/E,IAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,6BAA6B,IAAI,wBAAwB;AAG7F,OAAO,IAAMC,QAAQ,GAAGR,YAAY,CAACE,WAAW,EAAEI,eAAe,EAAE;EACjEG,IAAI,EAAE;IACJC,OAAO,EAAET,YAAY;IACrBU,gBAAgB,EAAE,IAAI;IACtBC,cAAc,EAAE,IAAI;IACpBC,kBAAkB,EAAE;EACtB;AACF,CAAC,CAAC;AAEF,OAAO,IAAMC,kBAAkB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IAC5C,IAAI;MAEFC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAClD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAAA,gBAPYL,kBAAkBA,CAAA;IAAA,OAAAC,IAAA,CAAAK,KAAA,OAAAC,SAAA;EAAA;AAAA,GAO9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}