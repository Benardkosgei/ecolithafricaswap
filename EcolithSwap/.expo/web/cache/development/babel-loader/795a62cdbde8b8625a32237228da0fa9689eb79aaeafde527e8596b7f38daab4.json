{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport apiService from \"./api\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar AuthService = function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n    this.currentUser = null;\n    this.isAuthenticated = false;\n  }\n  return _createClass(AuthService, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator(function* () {\n        try {\n          var token = yield apiService.getStoredToken();\n          if (token) {\n            var userData = yield this.getCurrentUser();\n            if (userData) {\n              this.currentUser = userData;\n              this.isAuthenticated = true;\n              return true;\n            }\n          }\n        } catch (error) {\n          console.error('Auth initialization error:', error);\n          yield this.logout();\n        }\n        return false;\n      });\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }, {\n    key: \"register\",\n    value: function () {\n      var _register = _asyncToGenerator(function* (userData) {\n        try {\n          var response = yield apiService.post('/auth/register', userData);\n          if (response.token) {\n            yield apiService.storeToken(response.token);\n            if (response.refreshToken) {\n              yield AsyncStorage.setItem('refreshToken', response.refreshToken);\n            }\n            this.currentUser = response.user;\n            this.isAuthenticated = true;\n          }\n          return response;\n        } catch (error) {\n          console.error('Registration error:', error);\n          throw error;\n        }\n      });\n      function register(_x) {\n        return _register.apply(this, arguments);\n      }\n      return register;\n    }()\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator(function* (email, password) {\n        try {\n          var response = yield apiService.post('/auth/login', {\n            email: email,\n            password: password\n          });\n          if (response.token) {\n            yield apiService.storeToken(response.token);\n            if (response.refreshToken) {\n              yield AsyncStorage.setItem('refreshToken', response.refreshToken);\n            }\n            this.currentUser = response.user;\n            this.isAuthenticated = true;\n          }\n          return response;\n        } catch (error) {\n          console.error('Login error:', error);\n          throw error;\n        }\n      });\n      function login(_x2, _x3) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }()\n  }, {\n    key: \"logout\",\n    value: function () {\n      var _logout = _asyncToGenerator(function* () {\n        try {\n          if (this.isAuthenticated) {\n            yield apiService.post('/auth/logout');\n          }\n        } catch (error) {\n          console.error('Logout error:', error);\n        } finally {\n          yield apiService.removeToken();\n          yield AsyncStorage.removeItem('refreshToken');\n          this.currentUser = null;\n          this.isAuthenticated = false;\n        }\n      });\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n      return logout;\n    }()\n  }, {\n    key: \"getCurrentUser\",\n    value: function () {\n      var _getCurrentUser = _asyncToGenerator(function* () {\n        try {\n          var response = yield apiService.get('/auth/profile');\n          this.currentUser = response.data ? response.data.user : response.user;\n          return this.currentUser;\n        } catch (error) {\n          console.error('Get current user error:', error);\n          return null;\n        }\n      });\n      function getCurrentUser() {\n        return _getCurrentUser.apply(this, arguments);\n      }\n      return getCurrentUser;\n    }()\n  }, {\n    key: \"updateProfile\",\n    value: function () {\n      var _updateProfile = _asyncToGenerator(function* (profileData) {\n        try {\n          var response = yield apiService.put('/auth/profile', profileData);\n          yield this.getCurrentUser();\n          return response;\n        } catch (error) {\n          console.error('Update profile error:', error);\n          throw error;\n        }\n      });\n      function updateProfile(_x4) {\n        return _updateProfile.apply(this, arguments);\n      }\n      return updateProfile;\n    }()\n  }, {\n    key: \"changePassword\",\n    value: function () {\n      var _changePassword = _asyncToGenerator(function* (currentPassword, newPassword) {\n        try {\n          var response = yield apiService.put('/auth/change-password', {\n            currentPassword: currentPassword,\n            newPassword: newPassword\n          });\n          return response;\n        } catch (error) {\n          console.error('Change password error:', error);\n          throw error;\n        }\n      });\n      function changePassword(_x5, _x6) {\n        return _changePassword.apply(this, arguments);\n      }\n      return changePassword;\n    }()\n  }, {\n    key: \"refreshToken\",\n    value: function () {\n      var _refreshToken = _asyncToGenerator(function* () {\n        try {\n          var _refreshToken2 = yield AsyncStorage.getItem('refreshToken');\n          if (!_refreshToken2) {\n            throw new Error('No refresh token available');\n          }\n          var response = yield apiService.post('/auth/refresh', {\n            refreshToken: _refreshToken2\n          });\n          if (response.token) {\n            yield apiService.storeToken(response.token);\n            if (response.refreshToken) {\n              yield AsyncStorage.setItem('refreshToken', response.refreshToken);\n            }\n            return true;\n          }\n          return false;\n        } catch (error) {\n          console.error('Token refresh error:', error);\n          yield this.logout();\n          return false;\n        }\n      });\n      function refreshToken() {\n        return _refreshToken.apply(this, arguments);\n      }\n      return refreshToken;\n    }()\n  }, {\n    key: \"isUserAuthenticated\",\n    value: function isUserAuthenticated() {\n      return this.isAuthenticated;\n    }\n  }, {\n    key: \"getCurrentUserData\",\n    value: function getCurrentUserData() {\n      return this.currentUser;\n    }\n  }, {\n    key: \"hasRole\",\n    value: function hasRole(role) {\n      return this.currentUser && this.currentUser.role === role;\n    }\n  }, {\n    key: \"isAdmin\",\n    value: function isAdmin() {\n      return this.hasRole('admin');\n    }\n  }, {\n    key: \"isStationManager\",\n    value: function isStationManager() {\n      return this.hasRole('station_manager');\n    }\n  }]);\n}();\nvar authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["apiService","AsyncStorage","AuthService","_classCallCheck","currentUser","isAuthenticated","_createClass","key","value","_initialize","_asyncToGenerator","token","getStoredToken","userData","getCurrentUser","error","console","logout","initialize","apply","arguments","_register","response","post","storeToken","refreshToken","setItem","user","register","_x","_login","email","password","login","_x2","_x3","_logout","removeToken","removeItem","_getCurrentUser","get","data","_updateProfile","profileData","put","updateProfile","_x4","_changePassword","currentPassword","newPassword","changePassword","_x5","_x6","_refreshToken","getItem","Error","isUserAuthenticated","getCurrentUserData","hasRole","role","isAdmin","isStationManager","authService"],"sources":["C:/Users/User/Desktop/Ecolith Promps/V3/EcolithSwap/src/services/authService.js"],"sourcesContent":["import apiService from './api';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nclass AuthService {\n  constructor() {\n    this.currentUser = null;\n    this.isAuthenticated = false;\n  }\n\n  // Initialize auth service (check for stored token)\n  async initialize() {\n    try {\n      const token = await apiService.getStoredToken();\n      if (token) {\n        // Verify token by getting user profile\n        const userData = await this.getCurrentUser();\n        if (userData) {\n          this.currentUser = userData;\n          this.isAuthenticated = true;\n          return true;\n        }\n      }\n    } catch (error) {\n      console.error('Auth initialization error:', error);\n      await this.logout();\n    }\n    return false;\n  }\n\n  // Register new user\n  async register(userData) {\n    try {\n      const response = await apiService.post('/auth/register', userData);\n      \n      if (response.token) {\n        await apiService.storeToken(response.token);\n        if (response.refreshToken) {\n          await AsyncStorage.setItem('refreshToken', response.refreshToken);\n        }\n        \n        this.currentUser = response.user;\n        this.isAuthenticated = true;\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  // Login user\n  async login(email, password) {\n    try {\n      const response = await apiService.post('/auth/login', {\n        email,\n        password\n      });\n      \n      if (response.token) {\n        await apiService.storeToken(response.token);\n        if (response.refreshToken) {\n          await AsyncStorage.setItem('refreshToken', response.refreshToken);\n        }\n        \n        this.currentUser = response.user;\n        this.isAuthenticated = true;\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  // Logout user\n  async logout() {\n    try {\n      if (this.isAuthenticated) {\n        await apiService.post('/auth/logout');\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear local data regardless of API call success\n      await apiService.removeToken();\n      await AsyncStorage.removeItem('refreshToken');\n      this.currentUser = null;\n      this.isAuthenticated = false;\n    }\n  }\n\n  // Get current user profile\n  async getCurrentUser() {\n    try {\n      const response = await apiService.get('/auth/profile');\n      this.currentUser = response.data ? response.data.user : response.user;\n      return this.currentUser;\n    } catch (error) {\n      console.error('Get current user error:', error);\n      return null;\n    }\n  }\n\n  // Update user profile\n  async updateProfile(profileData) {\n    try {\n      const response = await apiService.put('/auth/profile', profileData);\n      \n      // Refresh user data\n      await this.getCurrentUser();\n      \n      return response;\n    } catch (error) {\n      console.error('Update profile error:', error);\n      throw error;\n    }\n  }\n\n  // Change password\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const response = await apiService.put('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      \n      return response;\n    } catch (error) {\n      console.error('Change password error:', error);\n      throw error;\n    }\n  }\n\n  // Refresh access token\n  async refreshToken() {\n    try {\n      const refreshToken = await AsyncStorage.getItem('refreshToken');\n      \n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      \n      const response = await apiService.post('/auth/refresh', {\n        refreshToken\n      });\n      \n      if (response.token) {\n        await apiService.storeToken(response.token);\n        if (response.refreshToken) {\n          await AsyncStorage.setItem('refreshToken', response.refreshToken);\n        }\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      await this.logout();\n      return false;\n    }\n  }\n\n  // Check if user is authenticated\n  isUserAuthenticated() {\n    return this.isAuthenticated;\n  }\n\n  // Get current user data\n  getCurrentUserData() {\n    return this.currentUser;\n  }\n\n  // Check if user has specific role\n  hasRole(role) {\n    return this.currentUser && this.currentUser.role === role;\n  }\n\n  // Check if user is admin\n  isAdmin() {\n    return this.hasRole('admin');\n  }\n\n  // Check if user is station manager\n  isStationManager() {\n    return this.hasRole('station_manager');\n  }\n}\n\n// Create and export a singleton instance\nconst authService = new AuthService();\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}