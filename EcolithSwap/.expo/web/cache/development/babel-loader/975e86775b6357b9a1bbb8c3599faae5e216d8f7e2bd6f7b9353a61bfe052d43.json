{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { TextInput, Button, Card, FAB, ActivityIndicator, Modal, Portal, List } from 'react-native-paper';\nimport Icon from \"@expo/vector-icons/MaterialIcons\";\nimport { useData } from \"../contexts/DataContext\";\nimport { wasteService } from \"../services/wasteService\";\nimport { colors, typography, spacing } from \"../utils/theme\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function PlasticWasteScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useData = useData(),\n    userStats = _useData.userStats,\n    stations = _useData.stations,\n    isOnline = _useData.isOnline,\n    logPlasticWaste = _useData.logPlasticWaste;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    weight = _useState2[0],\n    setWeight = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedStation = _useState4[0],\n    setSelectedStation = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showStationPicker = _useState6[0],\n    setShowStationPicker = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    submitting = _useState8[0],\n    setSubmitting = _useState8[1];\n  var _useState9 = useState([]),\n    _useState0 = _slicedToArray(_useState9, 2),\n    wasteHistory = _useState0[0],\n    setWasteHistory = _useState0[1];\n  var _useState1 = useState(null),\n    _useState10 = _slicedToArray(_useState1, 2),\n    monthlyStats = _useState10[0],\n    setMonthlyStats = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    loading = _useState12[0],\n    setLoading = _useState12[1];\n  useEffect(function () {\n    loadWasteData();\n  }, []);\n  var loadWasteData = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        setLoading(true);\n        if (isOnline) {\n          var _yield$Promise$all = yield Promise.all([wasteService.getWasteHistory(10), wasteService.getMonthlyWasteStats()]),\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2),\n            history = _yield$Promise$all2[0],\n            monthly = _yield$Promise$all2[1];\n          setWasteHistory(history);\n          setMonthlyStats(monthly);\n        }\n      } catch (error) {\n        console.error('Error loading waste data:', error);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function loadWasteData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleSubmitWaste = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      var weightNum = parseFloat(weight);\n      if (!weightNum || weightNum <= 0) {\n        Alert.alert('Invalid Weight', 'Please enter a valid weight in kg.');\n        return;\n      }\n      if (weightNum > 100) {\n        Alert.alert('Weight Too High', 'Maximum weight allowed is 100kg per entry.');\n        return;\n      }\n      if (!selectedStation) {\n        Alert.alert('Station Required', 'Please select a station where you dropped off the plastic.');\n        return;\n      }\n      try {\n        setSubmitting(true);\n        var result = yield logPlasticWaste(weightNum, selectedStation.id);\n        if (result.success) {\n          var pointsMessage = `You earned ${result.points} eco points!`;\n          var offlineMessage = result.offline ? '\\\\n\\\\nLogged offline. Will sync when connected.' : '';\n          Alert.alert('Plastic Waste Logged', `${weightNum}kg of plastic waste recorded successfully!\\\\n${pointsMessage}${offlineMessage}`, [{\n            text: 'Log More',\n            onPress: function onPress() {\n              setWeight('');\n              setSelectedStation(null);\n              loadWasteData();\n            }\n          }, {\n            text: 'View Impact',\n            onPress: function onPress() {\n              return navigation.navigate('ImpactTab');\n            }\n          }]);\n        } else {\n          throw new Error(result.error);\n        }\n      } catch (error) {\n        Alert.alert('Submit Error', error.message || 'Failed to log plastic waste. Please try again.');\n      } finally {\n        setSubmitting(false);\n      }\n    });\n    return function handleSubmitWaste() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var formatDate = function formatDate(dateString) {\n    return new Date(dateString).toLocaleDateString('en-KE', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  var calculateNextReward = function calculateNextReward(currentPoints) {\n    var rewardTiers = [100, 250, 500, 1000, 2500, 5000];\n    var nextTier = rewardTiers.find(function (tier) {\n      return tier > currentPoints;\n    });\n    return nextTier || null;\n  };\n  var plasticStations = stations.filter(function (station) {\n    return station.accepts_plastic;\n  });\n  return _jsxs(KeyboardAvoidingView, {\n    style: styles.container,\n    behavior: Platform.OS === 'ios' ? 'padding' : 'height',\n    children: [_jsxs(ScrollView, {\n      style: styles.scrollView,\n      showsVerticalScrollIndicator: false,\n      children: [_jsxs(View, {\n        style: styles.header,\n        children: [_jsx(Text, {\n          style: styles.headerTitle,\n          children: \"Plastic Waste Recycling\"\n        }), _jsx(Text, {\n          style: styles.headerSubtitle,\n          children: \"Turn plastic waste into eco points and impact\"\n        }), !isOnline && _jsxs(View, {\n          style: styles.offlineWarning,\n          children: [_jsx(Icon, {\n            name: \"wifi-off\",\n            size: 16,\n            color: colors.warning\n          }), _jsx(Text, {\n            style: styles.offlineText,\n            children: \"Offline mode - entries will sync when connected\"\n          })]\n        })]\n      }), _jsx(Card, {\n        style: styles.pointsCard,\n        children: _jsxs(Card.Content, {\n          children: [_jsxs(View, {\n            style: styles.pointsHeader,\n            children: [_jsx(Icon, {\n              name: \"stars\",\n              size: 24,\n              color: colors.warning\n            }), _jsx(Text, {\n              style: styles.pointsTitle,\n              children: \"Your Eco Points\"\n            })]\n          }), _jsx(Text, {\n            style: styles.pointsValue,\n            children: userStats.currentPoints\n          }), _jsxs(View, {\n            style: styles.pointsInfo,\n            children: [_jsxs(Text, {\n              style: styles.pointsSubtext,\n              children: [\"Total Plastic Recycled: \", userStats.plasticRecycled.toFixed(1), \" kg\"]\n            }), function () {\n              var nextReward = calculateNextReward(userStats.currentPoints);\n              return nextReward ? _jsxs(Text, {\n                style: styles.nextReward,\n                children: [nextReward - userStats.currentPoints, \" points to next reward\"]\n              }) : _jsx(Text, {\n                style: styles.nextReward,\n                children: \"\\uD83C\\uDFC6 Max tier achieved!\"\n              });\n            }()]\n          })]\n        })\n      }), monthlyStats && _jsx(Card, {\n        style: styles.monthlyCard,\n        children: _jsxs(Card.Content, {\n          children: [_jsx(Text, {\n            style: styles.cardTitle,\n            children: \"This Month\"\n          }), _jsxs(View, {\n            style: styles.monthlyStats,\n            children: [_jsxs(View, {\n              style: styles.monthlyStat,\n              children: [_jsxs(Text, {\n                style: styles.monthlyValue,\n                children: [monthlyStats.totalWeight.toFixed(1), \" kg\"]\n              }), _jsx(Text, {\n                style: styles.monthlyLabel,\n                children: \"Plastic Recycled\"\n              })]\n            }), _jsxs(View, {\n              style: styles.monthlyStat,\n              children: [_jsx(Text, {\n                style: styles.monthlyValue,\n                children: monthlyStats.totalPoints\n              }), _jsx(Text, {\n                style: styles.monthlyLabel,\n                children: \"Points Earned\"\n              })]\n            }), _jsxs(View, {\n              style: styles.monthlyStat,\n              children: [_jsx(Text, {\n                style: styles.monthlyValue,\n                children: monthlyStats.logCount\n              }), _jsx(Text, {\n                style: styles.monthlyLabel,\n                children: \"Drop-offs\"\n              })]\n            })]\n          })]\n        })\n      }), _jsx(Card, {\n        style: styles.formCard,\n        children: _jsxs(Card.Content, {\n          children: [_jsx(Text, {\n            style: styles.cardTitle,\n            children: \"Log Plastic Waste\"\n          }), _jsx(TextInput, {\n            label: \"Weight (kg)\",\n            value: weight,\n            onChangeText: setWeight,\n            keyboardType: \"decimal-pad\",\n            mode: \"outlined\",\n            style: styles.weightInput,\n            placeholder: \"e.g., 2.5\",\n            right: _jsx(TextInput.Affix, {\n              text: \"kg\"\n            })\n          }), _jsx(Button, {\n            mode: \"outlined\",\n            onPress: function onPress() {\n              return setShowStationPicker(true);\n            },\n            style: styles.stationSelector,\n            contentStyle: styles.stationSelectorContent,\n            children: selectedStation ? selectedStation.name : 'Select Drop-off Station'\n          }), selectedStation && _jsxs(Text, {\n            style: styles.selectedStationAddress,\n            children: [\"\\uD83D\\uDCCD \", selectedStation.address]\n          }), weight && parseFloat(weight) > 0 && _jsx(View, {\n            style: styles.pointsPreview,\n            children: _jsxs(Text, {\n              style: styles.previewText,\n              children: [\"You will earn: \", Math.floor(parseFloat(weight) * 10), \" eco points\"]\n            })\n          }), _jsx(Button, {\n            mode: \"contained\",\n            onPress: handleSubmitWaste,\n            style: styles.submitButton,\n            loading: submitting,\n            disabled: !weight || !selectedStation || submitting,\n            children: \"Log Plastic Waste\"\n          })]\n        })\n      }), wasteHistory.length > 0 && _jsx(Card, {\n        style: styles.historyCard,\n        children: _jsxs(Card.Content, {\n          children: [_jsx(Text, {\n            style: styles.cardTitle,\n            children: \"Recent Drop-offs\"\n          }), wasteHistory.slice(0, 5).map(function (entry, index) {\n            var _entry$stations;\n            return _jsxs(View, {\n              style: styles.historyItem,\n              children: [_jsxs(View, {\n                style: styles.historyInfo,\n                children: [_jsxs(Text, {\n                  style: styles.historyWeight,\n                  children: [parseFloat(entry.weight_kg).toFixed(1), \" kg\"]\n                }), _jsx(Text, {\n                  style: styles.historyStation,\n                  children: ((_entry$stations = entry.stations) == null ? void 0 : _entry$stations.name) || 'Unknown Station'\n                }), _jsx(Text, {\n                  style: styles.historyDate,\n                  children: formatDate(entry.logged_at)\n                })]\n              }), _jsxs(View, {\n                style: styles.historyPoints,\n                children: [_jsxs(Text, {\n                  style: styles.historyPointsText,\n                  children: [\"+\", entry.points_earned]\n                }), _jsx(Icon, {\n                  name: \"stars\",\n                  size: 16,\n                  color: colors.warning\n                })]\n              })]\n            }, entry.id || index);\n          }), _jsx(Button, {\n            mode: \"text\",\n            onPress: function onPress() {\n              return navigation.navigate('HistoryTab');\n            },\n            style: styles.viewAllButton,\n            children: \"View All History\"\n          })]\n        })\n      }), _jsx(Card, {\n        style: styles.infoCard,\n        children: _jsxs(Card.Content, {\n          children: [_jsx(Text, {\n            style: styles.cardTitle,\n            children: \"How It Works\"\n          }), _jsxs(View, {\n            style: styles.infoItem,\n            children: [_jsx(Icon, {\n              name: \"recycling\",\n              size: 20,\n              color: colors.success\n            }), _jsx(Text, {\n              style: styles.infoText,\n              children: \"Drop off plastic waste at participating stations\"\n            })]\n          }), _jsxs(View, {\n            style: styles.infoItem,\n            children: [_jsx(Icon, {\n              name: \"stars\",\n              size: 20,\n              color: colors.warning\n            }), _jsx(Text, {\n              style: styles.infoText,\n              children: \"Earn 10 eco points per kg of plastic\"\n            })]\n          }), _jsxs(View, {\n            style: styles.infoItem,\n            children: [_jsx(Icon, {\n              name: \"eco\",\n              size: 20,\n              color: colors.info\n            }), _jsx(Text, {\n              style: styles.infoText,\n              children: \"Help save the environment and earn rewards\"\n            })]\n          })]\n        })\n      })]\n    }), _jsx(Portal, {\n      children: _jsxs(Modal, {\n        visible: showStationPicker,\n        onDismiss: function onDismiss() {\n          return setShowStationPicker(false);\n        },\n        contentContainerStyle: styles.modalContainer,\n        children: [_jsx(Text, {\n          style: styles.modalTitle,\n          children: \"Select Drop-off Station\"\n        }), _jsx(ScrollView, {\n          style: styles.stationList,\n          children: plasticStations.map(function (station) {\n            return _jsx(List.Item, {\n              title: station.name,\n              description: station.address,\n              left: function left(props) {\n                return _jsx(List.Icon, _objectSpread(_objectSpread({}, props), {}, {\n                  icon: \"location-on\"\n                }));\n              },\n              onPress: function onPress() {\n                setSelectedStation(station);\n                setShowStationPicker(false);\n              }\n            }, station.id);\n          })\n        }), _jsx(Button, {\n          mode: \"text\",\n          onPress: function onPress() {\n            return setShowStationPicker(false);\n          },\n          style: styles.modalCloseButton,\n          children: \"Cancel\"\n        })]\n      })\n    }), _jsx(FAB, {\n      style: styles.fab,\n      icon: \"qr-code-scanner\",\n      onPress: function onPress() {\n        return navigation.navigate('QRScanner');\n      },\n      label: \"Scan QR\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background\n  },\n  scrollView: {\n    flex: 1\n  },\n  header: {\n    backgroundColor: colors.success,\n    padding: spacing.lg,\n    paddingTop: spacing.xl\n  },\n  headerTitle: _objectSpread(_objectSpread({}, typography.h2), {}, {\n    color: 'white',\n    marginBottom: spacing.xs\n  }),\n  headerSubtitle: _objectSpread(_objectSpread({}, typography.body), {}, {\n    color: 'rgba(255, 255, 255, 0.8)'\n  }),\n  offlineWarning: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: spacing.md,\n    paddingHorizontal: spacing.md,\n    paddingVertical: spacing.sm,\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    borderRadius: 8,\n    gap: spacing.sm\n  },\n  offlineText: _objectSpread(_objectSpread({}, typography.caption), {}, {\n    color: 'white'\n  }),\n  pointsCard: {\n    margin: spacing.md,\n    backgroundColor: colors.surface\n  },\n  pointsHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: spacing.md\n  },\n  pointsTitle: _objectSpread(_objectSpread({}, typography.h3), {}, {\n    marginLeft: spacing.sm\n  }),\n  pointsValue: _objectSpread(_objectSpread({}, typography.h1), {}, {\n    color: colors.warning,\n    marginBottom: spacing.sm\n  }),\n  pointsInfo: {\n    gap: spacing.xs\n  },\n  pointsSubtext: _objectSpread(_objectSpread({}, typography.body), {}, {\n    color: colors.textSecondary\n  }),\n  nextReward: _objectSpread(_objectSpread({}, typography.caption), {}, {\n    color: colors.primary,\n    fontWeight: '600'\n  }),\n  monthlyCard: {\n    marginHorizontal: spacing.md,\n    marginBottom: spacing.md,\n    backgroundColor: colors.surface\n  },\n  cardTitle: _objectSpread(_objectSpread({}, typography.h3), {}, {\n    marginBottom: spacing.md\n  }),\n  monthlyStats: {\n    flexDirection: 'row',\n    justifyContent: 'space-around'\n  },\n  monthlyStat: {\n    alignItems: 'center'\n  },\n  monthlyValue: _objectSpread(_objectSpread({}, typography.h3), {}, {\n    color: colors.success,\n    marginBottom: spacing.xs\n  }),\n  monthlyLabel: _objectSpread(_objectSpread({}, typography.caption), {}, {\n    textAlign: 'center'\n  }),\n  formCard: {\n    marginHorizontal: spacing.md,\n    marginBottom: spacing.md,\n    backgroundColor: colors.surface\n  },\n  weightInput: {\n    marginBottom: spacing.md,\n    backgroundColor: colors.background\n  },\n  stationSelector: {\n    marginBottom: spacing.sm,\n    borderColor: colors.border\n  },\n  stationSelectorContent: {\n    paddingVertical: spacing.sm\n  },\n  selectedStationAddress: _objectSpread(_objectSpread({}, typography.caption), {}, {\n    color: colors.textSecondary,\n    marginBottom: spacing.md\n  }),\n  pointsPreview: {\n    backgroundColor: colors.warning + '20',\n    padding: spacing.md,\n    borderRadius: 8,\n    marginBottom: spacing.md\n  },\n  previewText: _objectSpread(_objectSpread({}, typography.body), {}, {\n    color: colors.warning,\n    textAlign: 'center',\n    fontWeight: '600'\n  }),\n  submitButton: {\n    backgroundColor: colors.success\n  },\n  historyCard: {\n    marginHorizontal: spacing.md,\n    marginBottom: spacing.md,\n    backgroundColor: colors.surface\n  },\n  historyItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: spacing.sm,\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border\n  },\n  historyInfo: {\n    flex: 1\n  },\n  historyWeight: _objectSpread(_objectSpread({}, typography.body), {}, {\n    fontWeight: '600'\n  }),\n  historyStation: _objectSpread(_objectSpread({}, typography.caption), {}, {\n    color: colors.textSecondary\n  }),\n  historyDate: _objectSpread(_objectSpread({}, typography.caption), {}, {\n    color: colors.textSecondary\n  }),\n  historyPoints: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: spacing.xs\n  },\n  historyPointsText: _objectSpread(_objectSpread({}, typography.caption), {}, {\n    color: colors.warning,\n    fontWeight: '600'\n  }),\n  viewAllButton: {\n    marginTop: spacing.sm\n  },\n  infoCard: {\n    marginHorizontal: spacing.md,\n    marginBottom: spacing.xxl,\n    backgroundColor: colors.surface\n  },\n  infoItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: spacing.md,\n    gap: spacing.md\n  },\n  infoText: _objectSpread(_objectSpread({}, typography.body), {}, {\n    flex: 1\n  }),\n  modalContainer: {\n    backgroundColor: colors.surface,\n    margin: spacing.lg,\n    borderRadius: 12,\n    maxHeight: '80%'\n  },\n  modalTitle: _objectSpread(_objectSpread({}, typography.h3), {}, {\n    padding: spacing.lg,\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border\n  }),\n  stationList: {\n    maxHeight: 400\n  },\n  modalCloseButton: {\n    margin: spacing.md\n  },\n  fab: {\n    position: 'absolute',\n    margin: spacing.md,\n    right: 0,\n    bottom: spacing.xl,\n    backgroundColor: colors.success\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","View","Text","StyleSheet","ScrollView","Alert","KeyboardAvoidingView","Platform","TextInput","Button","Card","FAB","ActivityIndicator","Modal","Portal","List","Icon","useData","wasteService","colors","typography","spacing","jsx","_jsx","jsxs","_jsxs","PlasticWasteScreen","_ref","navigation","_useData","userStats","stations","isOnline","logPlasticWaste","_useState","_useState2","_slicedToArray","weight","setWeight","_useState3","_useState4","selectedStation","setSelectedStation","_useState5","_useState6","showStationPicker","setShowStationPicker","_useState7","_useState8","submitting","setSubmitting","_useState9","_useState0","wasteHistory","setWasteHistory","_useState1","_useState10","monthlyStats","setMonthlyStats","_useState11","_useState12","loading","setLoading","loadWasteData","_ref2","_asyncToGenerator","_yield$Promise$all","Promise","all","getWasteHistory","getMonthlyWasteStats","_yield$Promise$all2","history","monthly","error","console","apply","arguments","handleSubmitWaste","_ref3","weightNum","parseFloat","alert","result","id","success","pointsMessage","points","offlineMessage","offline","text","onPress","navigate","Error","message","formatDate","dateString","Date","toLocaleDateString","year","month","day","hour","minute","calculateNextReward","currentPoints","rewardTiers","nextTier","find","tier","plasticStations","filter","station","accepts_plastic","style","styles","container","behavior","OS","children","scrollView","showsVerticalScrollIndicator","header","headerTitle","headerSubtitle","offlineWarning","name","size","color","warning","offlineText","pointsCard","Content","pointsHeader","pointsTitle","pointsValue","pointsInfo","pointsSubtext","plasticRecycled","toFixed","nextReward","monthlyCard","cardTitle","monthlyStat","monthlyValue","totalWeight","monthlyLabel","totalPoints","logCount","formCard","label","value","onChangeText","keyboardType","mode","weightInput","placeholder","right","Affix","stationSelector","contentStyle","stationSelectorContent","selectedStationAddress","address","pointsPreview","previewText","Math","floor","submitButton","disabled","length","historyCard","slice","map","entry","index","_entry$stations","historyItem","historyInfo","historyWeight","weight_kg","historyStation","historyDate","logged_at","historyPoints","historyPointsText","points_earned","viewAllButton","infoCard","infoItem","infoText","info","visible","onDismiss","contentContainerStyle","modalContainer","modalTitle","stationList","Item","title","description","left","props","_objectSpread","icon","modalCloseButton","fab","create","flex","backgroundColor","background","padding","lg","paddingTop","xl","h2","marginBottom","xs","body","flexDirection","alignItems","marginTop","md","paddingHorizontal","paddingVertical","sm","borderRadius","gap","caption","margin","surface","h3","marginLeft","h1","textSecondary","primary","fontWeight","marginHorizontal","justifyContent","textAlign","borderColor","border","borderBottomWidth","borderBottomColor","xxl","maxHeight","position","bottom"],"sources":["C:/Users/User/Desktop/Ecolith Promps/V3/EcolithSwap/src/screens/PlasticWasteScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native';\nimport {\n  TextInput,\n  Button,\n  Card,\n  FAB,\n  ActivityIndicator,\n  Modal,\n  Portal,\n  List,\n} from 'react-native-paper';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useData } from '../contexts/DataContext';\nimport { wasteService } from '../services/wasteService';\nimport { colors, typography, spacing } from '../utils/theme';\n\nexport default function PlasticWasteScreen({ navigation }) {\n  const { userStats, stations, isOnline, logPlasticWaste } = useData();\n  const [weight, setWeight] = useState('');\n  const [selectedStation, setSelectedStation] = useState(null);\n  const [showStationPicker, setShowStationPicker] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [wasteHistory, setWasteHistory] = useState([]);\n  const [monthlyStats, setMonthlyStats] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    loadWasteData();\n  }, []);\n\n  const loadWasteData = async () => {\n    try {\n      setLoading(true);\n      if (isOnline) {\n        const [history, monthly] = await Promise.all([\n          wasteService.getWasteHistory(10),\n          wasteService.getMonthlyWasteStats(),\n        ]);\n        setWasteHistory(history);\n        setMonthlyStats(monthly);\n      }\n    } catch (error) {\n      console.error('Error loading waste data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmitWaste = async () => {\n    // Validation\n    const weightNum = parseFloat(weight);\n    if (!weightNum || weightNum <= 0) {\n      Alert.alert('Invalid Weight', 'Please enter a valid weight in kg.');\n      return;\n    }\n\n    if (weightNum > 100) {\n      Alert.alert('Weight Too High', 'Maximum weight allowed is 100kg per entry.');\n      return;\n    }\n\n    if (!selectedStation) {\n      Alert.alert('Station Required', 'Please select a station where you dropped off the plastic.');\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      \n      const result = await logPlasticWaste(weightNum, selectedStation.id);\n      \n      if (result.success) {\n        const pointsMessage = `You earned ${result.points} eco points!`;\n        const offlineMessage = result.offline ? '\\\\n\\\\nLogged offline. Will sync when connected.' : '';\n        \n        Alert.alert(\n          'Plastic Waste Logged',\n          `${weightNum}kg of plastic waste recorded successfully!\\\\n${pointsMessage}${offlineMessage}`,\n          [\n            {\n              text: 'Log More',\n              onPress: () => {\n                setWeight('');\n                setSelectedStation(null);\n                loadWasteData(); // Refresh data\n              },\n            },\n            {\n              text: 'View Impact',\n              onPress: () => navigation.navigate('ImpactTab'),\n            },\n          ]\n        );\n      } else {\n        throw new Error(result.error);\n      }\n    } catch (error) {\n      Alert.alert('Submit Error', error.message || 'Failed to log plastic waste. Please try again.');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-KE', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const calculateNextReward = (currentPoints) => {\n    const rewardTiers = [100, 250, 500, 1000, 2500, 5000];\n    const nextTier = rewardTiers.find(tier => tier > currentPoints);\n    return nextTier || null;\n  };\n\n  const plasticStations = stations.filter(station => station.accepts_plastic);\n\n  return (\n    <KeyboardAvoidingView\n      style={styles.container}\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n    >\n      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>\n        {/* Header Stats */}\n        <View style={styles.header}>\n          <Text style={styles.headerTitle}>Plastic Waste Recycling</Text>\n          <Text style={styles.headerSubtitle}>\n            Turn plastic waste into eco points and impact\n          </Text>\n          \n          {!isOnline && (\n            <View style={styles.offlineWarning}>\n              <Icon name=\"wifi-off\" size={16} color={colors.warning} />\n              <Text style={styles.offlineText}>\n                Offline mode - entries will sync when connected\n              </Text>\n            </View>\n          )}\n        </View>\n\n        {/* Current Points Card */}\n        <Card style={styles.pointsCard}>\n          <Card.Content>\n            <View style={styles.pointsHeader}>\n              <Icon name=\"stars\" size={24} color={colors.warning} />\n              <Text style={styles.pointsTitle}>Your Eco Points</Text>\n            </View>\n            \n            <Text style={styles.pointsValue}>{userStats.currentPoints}</Text>\n            \n            <View style={styles.pointsInfo}>\n              <Text style={styles.pointsSubtext}>\n                Total Plastic Recycled: {userStats.plasticRecycled.toFixed(1)} kg\n              </Text>\n              \n              {(() => {\n                const nextReward = calculateNextReward(userStats.currentPoints);\n                return nextReward ? (\n                  <Text style={styles.nextReward}>\n                    {nextReward - userStats.currentPoints} points to next reward\n                  </Text>\n                ) : (\n                  <Text style={styles.nextReward}>\n                    🏆 Max tier achieved!\n                  </Text>\n                );\n              })()}\n            </View>\n          </Card.Content>\n        </Card>\n\n        {/* Monthly Stats */}\n        {monthlyStats && (\n          <Card style={styles.monthlyCard}>\n            <Card.Content>\n              <Text style={styles.cardTitle}>This Month</Text>\n              <View style={styles.monthlyStats}>\n                <View style={styles.monthlyStat}>\n                  <Text style={styles.monthlyValue}>{monthlyStats.totalWeight.toFixed(1)} kg</Text>\n                  <Text style={styles.monthlyLabel}>Plastic Recycled</Text>\n                </View>\n                <View style={styles.monthlyStat}>\n                  <Text style={styles.monthlyValue}>{monthlyStats.totalPoints}</Text>\n                  <Text style={styles.monthlyLabel}>Points Earned</Text>\n                </View>\n                <View style={styles.monthlyStat}>\n                  <Text style={styles.monthlyValue}>{monthlyStats.logCount}</Text>\n                  <Text style={styles.monthlyLabel}>Drop-offs</Text>\n                </View>\n              </View>\n            </Card.Content>\n          </Card>\n        )}\n\n        {/* Log Waste Form */}\n        <Card style={styles.formCard}>\n          <Card.Content>\n            <Text style={styles.cardTitle}>Log Plastic Waste</Text>\n            \n            {/* Weight Input */}\n            <TextInput\n              label=\"Weight (kg)\"\n              value={weight}\n              onChangeText={setWeight}\n              keyboardType=\"decimal-pad\"\n              mode=\"outlined\"\n              style={styles.weightInput}\n              placeholder=\"e.g., 2.5\"\n              right={<TextInput.Affix text=\"kg\" />}\n            />\n            \n            {/* Station Selector */}\n            <Button\n              mode=\"outlined\"\n              onPress={() => setShowStationPicker(true)}\n              style={styles.stationSelector}\n              contentStyle={styles.stationSelectorContent}\n            >\n              {selectedStation ? selectedStation.name : 'Select Drop-off Station'}\n            </Button>\n            \n            {selectedStation && (\n              <Text style={styles.selectedStationAddress}>\n                📍 {selectedStation.address}\n              </Text>\n            )}\n            \n            {/* Points Preview */}\n            {weight && parseFloat(weight) > 0 && (\n              <View style={styles.pointsPreview}>\n                <Text style={styles.previewText}>\n                  You will earn: {Math.floor(parseFloat(weight) * 10)} eco points\n                </Text>\n              </View>\n            )}\n            \n            {/* Submit Button */}\n            <Button\n              mode=\"contained\"\n              onPress={handleSubmitWaste}\n              style={styles.submitButton}\n              loading={submitting}\n              disabled={!weight || !selectedStation || submitting}\n            >\n              Log Plastic Waste\n            </Button>\n          </Card.Content>\n        </Card>\n\n        {/* Recent History */}\n        {wasteHistory.length > 0 && (\n          <Card style={styles.historyCard}>\n            <Card.Content>\n              <Text style={styles.cardTitle}>Recent Drop-offs</Text>\n              \n              {wasteHistory.slice(0, 5).map((entry, index) => (\n                <View key={entry.id || index} style={styles.historyItem}>\n                  <View style={styles.historyInfo}>\n                    <Text style={styles.historyWeight}>\n                      {parseFloat(entry.weight_kg).toFixed(1)} kg\n                    </Text>\n                    <Text style={styles.historyStation}>\n                      {entry.stations?.name || 'Unknown Station'}\n                    </Text>\n                    <Text style={styles.historyDate}>\n                      {formatDate(entry.logged_at)}\n                    </Text>\n                  </View>\n                  <View style={styles.historyPoints}>\n                    <Text style={styles.historyPointsText}>\n                      +{entry.points_earned}\n                    </Text>\n                    <Icon name=\"stars\" size={16} color={colors.warning} />\n                  </View>\n                </View>\n              ))}\n              \n              <Button\n                mode=\"text\"\n                onPress={() => navigation.navigate('HistoryTab')}\n                style={styles.viewAllButton}\n              >\n                View All History\n              </Button>\n            </Card.Content>\n          </Card>\n        )}\n\n        {/* Info Card */}\n        <Card style={styles.infoCard}>\n          <Card.Content>\n            <Text style={styles.cardTitle}>How It Works</Text>\n            \n            <View style={styles.infoItem}>\n              <Icon name=\"recycling\" size={20} color={colors.success} />\n              <Text style={styles.infoText}>\n                Drop off plastic waste at participating stations\n              </Text>\n            </View>\n            \n            <View style={styles.infoItem}>\n              <Icon name=\"stars\" size={20} color={colors.warning} />\n              <Text style={styles.infoText}>\n                Earn 10 eco points per kg of plastic\n              </Text>\n            </View>\n            \n            <View style={styles.infoItem}>\n              <Icon name=\"eco\" size={20} color={colors.info} />\n              <Text style={styles.infoText}>\n                Help save the environment and earn rewards\n              </Text>\n            </View>\n          </Card.Content>\n        </Card>\n      </ScrollView>\n\n      {/* Station Selection Modal */}\n      <Portal>\n        <Modal\n          visible={showStationPicker}\n          onDismiss={() => setShowStationPicker(false)}\n          contentContainerStyle={styles.modalContainer}\n        >\n          <Text style={styles.modalTitle}>Select Drop-off Station</Text>\n          \n          <ScrollView style={styles.stationList}>\n            {plasticStations.map((station) => (\n              <List.Item\n                key={station.id}\n                title={station.name}\n                description={station.address}\n                left={props => <List.Icon {...props} icon=\"location-on\" />}\n                onPress={() => {\n                  setSelectedStation(station);\n                  setShowStationPicker(false);\n                }}\n              />\n            ))}\n          </ScrollView>\n          \n          <Button\n            mode=\"text\"\n            onPress={() => setShowStationPicker(false)}\n            style={styles.modalCloseButton}\n          >\n            Cancel\n          </Button>\n        </Modal>\n      </Portal>\n\n      {/* QR Scanner FAB */}\n      <FAB\n        style={styles.fab}\n        icon=\"qr-code-scanner\"\n        onPress={() => navigation.navigate('QRScanner')}\n        label=\"Scan QR\"\n      />\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  scrollView: {\n    flex: 1,\n  },\n  header: {\n    backgroundColor: colors.success,\n    padding: spacing.lg,\n    paddingTop: spacing.xl,\n  },\n  headerTitle: {\n    ...typography.h2,\n    color: 'white',\n    marginBottom: spacing.xs,\n  },\n  headerSubtitle: {\n    ...typography.body,\n    color: 'rgba(255, 255, 255, 0.8)',\n  },\n  offlineWarning: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: spacing.md,\n    paddingHorizontal: spacing.md,\n    paddingVertical: spacing.sm,\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    borderRadius: 8,\n    gap: spacing.sm,\n  },\n  offlineText: {\n    ...typography.caption,\n    color: 'white',\n  },\n  pointsCard: {\n    margin: spacing.md,\n    backgroundColor: colors.surface,\n  },\n  pointsHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: spacing.md,\n  },\n  pointsTitle: {\n    ...typography.h3,\n    marginLeft: spacing.sm,\n  },\n  pointsValue: {\n    ...typography.h1,\n    color: colors.warning,\n    marginBottom: spacing.sm,\n  },\n  pointsInfo: {\n    gap: spacing.xs,\n  },\n  pointsSubtext: {\n    ...typography.body,\n    color: colors.textSecondary,\n  },\n  nextReward: {\n    ...typography.caption,\n    color: colors.primary,\n    fontWeight: '600',\n  },\n  monthlyCard: {\n    marginHorizontal: spacing.md,\n    marginBottom: spacing.md,\n    backgroundColor: colors.surface,\n  },\n  cardTitle: {\n    ...typography.h3,\n    marginBottom: spacing.md,\n  },\n  monthlyStats: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  monthlyStat: {\n    alignItems: 'center',\n  },\n  monthlyValue: {\n    ...typography.h3,\n    color: colors.success,\n    marginBottom: spacing.xs,\n  },\n  monthlyLabel: {\n    ...typography.caption,\n    textAlign: 'center',\n  },\n  formCard: {\n    marginHorizontal: spacing.md,\n    marginBottom: spacing.md,\n    backgroundColor: colors.surface,\n  },\n  weightInput: {\n    marginBottom: spacing.md,\n    backgroundColor: colors.background,\n  },\n  stationSelector: {\n    marginBottom: spacing.sm,\n    borderColor: colors.border,\n  },\n  stationSelectorContent: {\n    paddingVertical: spacing.sm,\n  },\n  selectedStationAddress: {\n    ...typography.caption,\n    color: colors.textSecondary,\n    marginBottom: spacing.md,\n  },\n  pointsPreview: {\n    backgroundColor: colors.warning + '20',\n    padding: spacing.md,\n    borderRadius: 8,\n    marginBottom: spacing.md,\n  },\n  previewText: {\n    ...typography.body,\n    color: colors.warning,\n    textAlign: 'center',\n    fontWeight: '600',\n  },\n  submitButton: {\n    backgroundColor: colors.success,\n  },\n  historyCard: {\n    marginHorizontal: spacing.md,\n    marginBottom: spacing.md,\n    backgroundColor: colors.surface,\n  },\n  historyItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: spacing.sm,\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border,\n  },\n  historyInfo: {\n    flex: 1,\n  },\n  historyWeight: {\n    ...typography.body,\n    fontWeight: '600',\n  },\n  historyStation: {\n    ...typography.caption,\n    color: colors.textSecondary,\n  },\n  historyDate: {\n    ...typography.caption,\n    color: colors.textSecondary,\n  },\n  historyPoints: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: spacing.xs,\n  },\n  historyPointsText: {\n    ...typography.caption,\n    color: colors.warning,\n    fontWeight: '600',\n  },\n  viewAllButton: {\n    marginTop: spacing.sm,\n  },\n  infoCard: {\n    marginHorizontal: spacing.md,\n    marginBottom: spacing.xxl,\n    backgroundColor: colors.surface,\n  },\n  infoItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: spacing.md,\n    gap: spacing.md,\n  },\n  infoText: {\n    ...typography.body,\n    flex: 1,\n  },\n  modalContainer: {\n    backgroundColor: colors.surface,\n    margin: spacing.lg,\n    borderRadius: 12,\n    maxHeight: '80%',\n  },\n  modalTitle: {\n    ...typography.h3,\n    padding: spacing.lg,\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border,\n  },\n  stationList: {\n    maxHeight: 400,\n  },\n  modalCloseButton: {\n    margin: spacing.md,\n  },\n  fab: {\n    position: 'absolute',\n    margin: spacing.md,\n    right: 0,\n    bottom: spacing.xl,\n    backgroundColor: colors.success,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}