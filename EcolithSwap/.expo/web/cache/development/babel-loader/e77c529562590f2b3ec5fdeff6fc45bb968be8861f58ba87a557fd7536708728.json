{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Searchbar, FAB, Card, Chip, ActivityIndicator } from 'react-native-paper';\nimport MapView, { Marker, PROVIDER_GOOGLE } from 'react-native-maps';\nimport Icon from \"@expo/vector-icons/MaterialIcons\";\nimport { useData } from \"../contexts/DataContext\";\nimport { stationService } from \"../services/stationService\";\nimport { colors, typography, spacing } from \"../utils/theme\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nexport default function StationFinderScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useData = useData(),\n    stations = _useData.stations,\n    isOnline = _useData.isOnline,\n    loading = _useData.loading;\n  var _useState = useState('list'),\n    _useState2 = _slicedToArray(_useState, 2),\n    viewMode = _useState2[0],\n    setViewMode = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    searchQuery = _useState4[0],\n    setSearchQuery = _useState4[1];\n  var _useState5 = useState('all'),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedFilter = _useState6[0],\n    setSelectedFilter = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    userLocation = _useState8[0],\n    setUserLocation = _useState8[1];\n  var _useState9 = useState([]),\n    _useState0 = _slicedToArray(_useState9, 2),\n    filteredStations = _useState0[0],\n    setFilteredStations = _useState0[1];\n  var _useState1 = useState(false),\n    _useState10 = _slicedToArray(_useState1, 2),\n    loadingLocation = _useState10[0],\n    setLoadingLocation = _useState10[1];\n  useEffect(function () {\n    getUserLocation();\n  }, []);\n  useEffect(function () {\n    filterStations();\n  }, [stations, searchQuery, selectedFilter]);\n  var getUserLocation = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        setLoadingLocation(true);\n        var location = yield stationService.getCurrentLocation();\n        setUserLocation(location);\n      } catch (error) {\n        console.error('Error getting location:', error);\n        Alert.alert('Location Error', 'Could not get your current location. Showing all stations.', [{\n          text: 'OK'\n        }]);\n      } finally {\n        setLoadingLocation(false);\n      }\n    });\n    return function getUserLocation() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var filterStations = function filterStations() {\n    var filtered = stations;\n    if (searchQuery) {\n      filtered = filtered.filter(function (station) {\n        return station.name.toLowerCase().includes(searchQuery.toLowerCase()) || station.address.toLowerCase().includes(searchQuery.toLowerCase());\n      });\n    }\n    if (selectedFilter !== 'all') {\n      filtered = filtered.filter(function (station) {\n        return station.station_type === selectedFilter || station.station_type === 'both';\n      });\n    }\n    if (userLocation) {\n      filtered = filtered.map(function (station) {\n        return _objectSpread(_objectSpread({}, station), {}, {\n          distance: stationService.calculateDistance(userLocation.latitude, userLocation.longitude, parseFloat(station.latitude), parseFloat(station.longitude))\n        });\n      }).sort(function (a, b) {\n        return a.distance - b.distance;\n      });\n    }\n    setFilteredStations(filtered);\n  };\n  var getStationIcon = function getStationIcon(stationType) {\n    switch (stationType) {\n      case 'swap':\n        return 'swap-horizontal-circle';\n      case 'charge':\n        return 'battery-charging-full';\n      case 'both':\n        return 'battery-plus';\n      default:\n        return 'location-on';\n    }\n  };\n  var getAvailabilityColor = function getAvailabilityColor(available, total) {\n    var ratio = available / total;\n    if (ratio > 0.5) return colors.success;\n    if (ratio > 0.2) return colors.warning;\n    return colors.error;\n  };\n  var renderStationCard = function renderStationCard(_ref3) {\n    var station = _ref3.item;\n    return _jsx(Card, {\n      style: styles.stationCard,\n      children: _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('StationDetail', {\n            station: station\n          });\n        },\n        children: _jsxs(Card.Content, {\n          children: [_jsxs(View, {\n            style: styles.stationHeader,\n            children: [_jsxs(View, {\n              style: styles.stationInfo,\n              children: [_jsx(Text, {\n                style: styles.stationName,\n                children: station.name\n              }), _jsx(Text, {\n                style: styles.stationAddress,\n                children: station.address\n              }), station.distance && _jsxs(Text, {\n                style: styles.stationDistance,\n                children: [station.distance.toFixed(1), \" km away\"]\n              })]\n            }), _jsx(Icon, {\n              name: getStationIcon(station.station_type),\n              size: 32,\n              color: colors.primary\n            })]\n          }), _jsxs(View, {\n            style: styles.stationDetails,\n            children: [_jsxs(View, {\n              style: styles.availabilityContainer,\n              children: [_jsx(Text, {\n                style: styles.availabilityLabel,\n                children: \"Available Batteries:\"\n              }), _jsxs(Text, {\n                style: [styles.availabilityCount, {\n                  color: getAvailabilityColor(station.available_batteries, station.total_slots)\n                }],\n                children: [station.available_batteries, \"/\", station.total_slots]\n              })]\n            }), _jsxs(View, {\n              style: styles.chipContainer,\n              children: [_jsx(Chip, {\n                mode: \"outlined\",\n                compact: true,\n                style: [styles.typeChip, {\n                  borderColor: colors.primary\n                }],\n                children: station.station_type.toUpperCase()\n              }), station.accepts_plastic && _jsx(Chip, {\n                mode: \"outlined\",\n                compact: true,\n                icon: \"recycling\",\n                style: [styles.typeChip, {\n                  borderColor: colors.success\n                }],\n                children: \"Plastic\"\n              }), station.self_service && _jsx(Chip, {\n                mode: \"outlined\",\n                compact: true,\n                icon: \"android\",\n                style: [styles.typeChip, {\n                  borderColor: colors.info\n                }],\n                children: \"Self-Service\"\n              })]\n            })]\n          })]\n        })\n      })\n    });\n  };\n  var renderMapView = function renderMapView() {\n    return _jsx(MapView, {\n      provider: PROVIDER_GOOGLE,\n      style: styles.map,\n      region: {\n        latitude: (userLocation == null ? void 0 : userLocation.latitude) || -1.286389,\n        longitude: (userLocation == null ? void 0 : userLocation.longitude) || 36.817223,\n        latitudeDelta: 0.05,\n        longitudeDelta: 0.05\n      },\n      showsUserLocation: true,\n      showsMyLocationButton: true,\n      children: filteredStations.map(function (station) {\n        return _jsx(Marker, {\n          coordinate: {\n            latitude: parseFloat(station.latitude),\n            longitude: parseFloat(station.longitude)\n          },\n          title: station.name,\n          description: `${station.available_batteries}/${station.total_slots} batteries available`,\n          onPress: function onPress() {\n            return navigation.navigate('StationDetail', {\n              station: station\n            });\n          },\n          children: _jsx(View, {\n            style: styles.markerContainer,\n            children: _jsx(Icon, {\n              name: getStationIcon(station.station_type),\n              size: 24,\n              color: colors.primary\n            })\n          })\n        }, station.id);\n      })\n    });\n  };\n  var renderFilters = function renderFilters() {\n    return _jsxs(View, {\n      style: styles.filtersContainer,\n      children: [_jsx(TouchableOpacity, {\n        style: [styles.filterChip, selectedFilter === 'all' && styles.filterChipActive],\n        onPress: function onPress() {\n          return setSelectedFilter('all');\n        },\n        children: _jsx(Text, {\n          style: [styles.filterText, selectedFilter === 'all' && styles.filterTextActive],\n          children: \"All\"\n        })\n      }), _jsx(TouchableOpacity, {\n        style: [styles.filterChip, selectedFilter === 'swap' && styles.filterChipActive],\n        onPress: function onPress() {\n          return setSelectedFilter('swap');\n        },\n        children: _jsx(Text, {\n          style: [styles.filterText, selectedFilter === 'swap' && styles.filterTextActive],\n          children: \"Swap Only\"\n        })\n      }), _jsx(TouchableOpacity, {\n        style: [styles.filterChip, selectedFilter === 'charge' && styles.filterChipActive],\n        onPress: function onPress() {\n          return setSelectedFilter('charge');\n        },\n        children: _jsx(Text, {\n          style: [styles.filterText, selectedFilter === 'charge' && styles.filterTextActive],\n          children: \"Charge Only\"\n        })\n      })]\n    });\n  };\n  if (loading) {\n    return _jsxs(View, {\n      style: styles.centered,\n      children: [_jsx(ActivityIndicator, {\n        size: \"large\",\n        color: colors.primary\n      }), _jsx(Text, {\n        style: styles.loadingText,\n        children: \"Loading stations...\"\n      })]\n    });\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Searchbar, {\n      placeholder: \"Search stations...\",\n      onChangeText: setSearchQuery,\n      value: searchQuery,\n      style: styles.searchBar\n    }), renderFilters(), _jsxs(View, {\n      style: styles.viewToggle,\n      children: [_jsxs(TouchableOpacity, {\n        style: [styles.toggleButton, viewMode === 'list' && styles.toggleButtonActive],\n        onPress: function onPress() {\n          return setViewMode('list');\n        },\n        children: [_jsx(Icon, {\n          name: \"list\",\n          size: 20,\n          color: viewMode === 'list' ? 'white' : colors.primary\n        }), _jsx(Text, {\n          style: [styles.toggleText, viewMode === 'list' && styles.toggleTextActive],\n          children: \"List\"\n        })]\n      }), _jsxs(TouchableOpacity, {\n        style: [styles.toggleButton, viewMode === 'map' && styles.toggleButtonActive],\n        onPress: function onPress() {\n          return setViewMode('map');\n        },\n        children: [_jsx(Icon, {\n          name: \"map\",\n          size: 20,\n          color: viewMode === 'map' ? 'white' : colors.primary\n        }), _jsx(Text, {\n          style: [styles.toggleText, viewMode === 'map' && styles.toggleTextActive],\n          children: \"Map\"\n        })]\n      })]\n    }), viewMode === 'list' ? _jsx(FlatList, {\n      data: filteredStations,\n      renderItem: renderStationCard,\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      },\n      style: styles.stationsList,\n      showsVerticalScrollIndicator: false,\n      ListEmptyComponent: _jsxs(View, {\n        style: styles.emptyContainer,\n        children: [_jsx(Icon, {\n          name: \"location-off\",\n          size: 48,\n          color: colors.textSecondary\n        }), _jsx(Text, {\n          style: styles.emptyText,\n          children: \"No stations found\"\n        }), _jsx(Text, {\n          style: styles.emptySubtext,\n          children: !isOnline ? 'You are offline. Showing cached stations only.' : 'Try adjusting your search or filters.'\n        })]\n      })\n    }) : renderMapView(), _jsx(FAB, {\n      style: styles.refreshFab,\n      icon: \"refresh\",\n      onPress: getUserLocation,\n      loading: loadingLocation,\n      small: true\n    }), _jsx(View, {\n      style: styles.resultsCounter,\n      children: _jsxs(Text, {\n        style: styles.resultsText,\n        children: [filteredStations.length, \" station\", filteredStations.length !== 1 ? 's' : '', \" found\"]\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background\n  },\n  centered: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  loadingText: _objectSpread(_objectSpread({}, typography.body), {}, {\n    marginTop: spacing.md,\n    color: colors.textSecondary\n  }),\n  searchBar: {\n    margin: spacing.md,\n    backgroundColor: colors.surface\n  },\n  filtersContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: spacing.md,\n    paddingBottom: spacing.sm,\n    gap: spacing.sm\n  },\n  filterChip: {\n    paddingHorizontal: spacing.md,\n    paddingVertical: spacing.sm,\n    backgroundColor: colors.surface,\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: colors.border\n  },\n  filterChipActive: {\n    backgroundColor: colors.primary,\n    borderColor: colors.primary\n  },\n  filterText: _objectSpread(_objectSpread({}, typography.caption), {}, {\n    color: colors.text\n  }),\n  filterTextActive: {\n    color: 'white'\n  },\n  viewToggle: {\n    flexDirection: 'row',\n    margin: spacing.md,\n    backgroundColor: colors.surface,\n    borderRadius: 8,\n    padding: 4\n  },\n  toggleButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: spacing.sm,\n    borderRadius: 6,\n    gap: spacing.xs\n  },\n  toggleButtonActive: {\n    backgroundColor: colors.primary\n  },\n  toggleText: _objectSpread(_objectSpread({}, typography.caption), {}, {\n    color: colors.primary\n  }),\n  toggleTextActive: {\n    color: 'white'\n  },\n  stationsList: {\n    flex: 1,\n    paddingHorizontal: spacing.md\n  },\n  stationCard: {\n    marginBottom: spacing.md,\n    backgroundColor: colors.surface\n  },\n  stationHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: spacing.md\n  },\n  stationInfo: {\n    flex: 1\n  },\n  stationName: _objectSpread(_objectSpread({}, typography.h3), {}, {\n    marginBottom: spacing.xs\n  }),\n  stationAddress: _objectSpread(_objectSpread({}, typography.body), {}, {\n    color: colors.textSecondary,\n    marginBottom: spacing.xs\n  }),\n  stationDistance: _objectSpread(_objectSpread({}, typography.caption), {}, {\n    color: colors.primary,\n    fontWeight: '600'\n  }),\n  stationDetails: {\n    gap: spacing.sm\n  },\n  availabilityContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  availabilityLabel: _objectSpread({}, typography.body),\n  availabilityCount: _objectSpread(_objectSpread({}, typography.h3), {}, {\n    fontWeight: 'bold'\n  }),\n  chipContainer: {\n    flexDirection: 'row',\n    gap: spacing.sm\n  },\n  typeChip: {\n    height: 28\n  },\n  map: {\n    flex: 1\n  },\n  markerContainer: {\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: spacing.sm,\n    borderWidth: 2,\n    borderColor: colors.primary\n  },\n  refreshFab: {\n    position: 'absolute',\n    margin: spacing.md,\n    right: 0,\n    top: height * 0.3,\n    backgroundColor: colors.primary\n  },\n  resultsCounter: {\n    position: 'absolute',\n    bottom: spacing.md,\n    left: spacing.md,\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n    paddingHorizontal: spacing.md,\n    paddingVertical: spacing.sm,\n    borderRadius: 20\n  },\n  resultsText: _objectSpread(_objectSpread({}, typography.caption), {}, {\n    color: 'white'\n  }),\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: spacing.xxl\n  },\n  emptyText: _objectSpread(_objectSpread({}, typography.h3), {}, {\n    marginTop: spacing.md,\n    marginBottom: spacing.sm,\n    color: colors.textSecondary\n  }),\n  emptySubtext: _objectSpread(_objectSpread({}, typography.body), {}, {\n    textAlign: 'center',\n    color: colors.textSecondary,\n    paddingHorizontal: spacing.xl\n  })\n});","map":{"version":3,"names":["React","useState","useEffect","View","Text","StyleSheet","FlatList","TouchableOpacity","Alert","Dimensions","Searchbar","FAB","Card","Chip","ActivityIndicator","MapView","Marker","PROVIDER_GOOGLE","Icon","useData","stationService","colors","typography","spacing","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","width","height","StationFinderScreen","_ref","navigation","_useData","stations","isOnline","loading","_useState","_useState2","_slicedToArray","viewMode","setViewMode","_useState3","_useState4","searchQuery","setSearchQuery","_useState5","_useState6","selectedFilter","setSelectedFilter","_useState7","_useState8","userLocation","setUserLocation","_useState9","_useState0","filteredStations","setFilteredStations","_useState1","_useState10","loadingLocation","setLoadingLocation","getUserLocation","filterStations","_ref2","_asyncToGenerator","location","getCurrentLocation","error","console","alert","text","apply","arguments","filtered","filter","station","name","toLowerCase","includes","address","station_type","map","_objectSpread","distance","calculateDistance","latitude","longitude","parseFloat","sort","a","b","getStationIcon","stationType","getAvailabilityColor","available","total","ratio","success","warning","renderStationCard","_ref3","item","style","styles","stationCard","children","onPress","navigate","Content","stationHeader","stationInfo","stationName","stationAddress","stationDistance","toFixed","size","color","primary","stationDetails","availabilityContainer","availabilityLabel","availabilityCount","available_batteries","total_slots","chipContainer","mode","compact","typeChip","borderColor","toUpperCase","accepts_plastic","icon","self_service","info","renderMapView","provider","region","latitudeDelta","longitudeDelta","showsUserLocation","showsMyLocationButton","coordinate","title","description","markerContainer","id","renderFilters","filtersContainer","filterChip","filterChipActive","filterText","filterTextActive","centered","loadingText","container","placeholder","onChangeText","value","searchBar","viewToggle","toggleButton","toggleButtonActive","toggleText","toggleTextActive","data","renderItem","keyExtractor","stationsList","showsVerticalScrollIndicator","ListEmptyComponent","emptyContainer","textSecondary","emptyText","emptySubtext","refreshFab","small","resultsCounter","resultsText","length","create","flex","backgroundColor","background","justifyContent","alignItems","body","marginTop","md","margin","surface","flexDirection","paddingHorizontal","paddingBottom","sm","gap","paddingVertical","borderRadius","borderWidth","border","caption","padding","xs","marginBottom","h3","fontWeight","position","right","top","bottom","left","xxl","textAlign","xl"],"sources":["C:/Users/User/Desktop/Ecolith Promps/V3/EcolithSwap/src/screens/StationFinderScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  FlatList,\n  TouchableOpacity,\n  Alert,\n  Dimensions,\n} from 'react-native';\nimport { Searchbar, FAB, Card, Chip, ActivityIndicator } from 'react-native-paper';\nimport MapView, { Marker, PROVIDER_GOOGLE } from 'react-native-maps';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useData } from '../contexts/DataContext';\nimport { stationService } from '../services/stationService';\nimport { colors, typography, spacing } from '../utils/theme';\n\nconst { width, height } = Dimensions.get('window');\n\nexport default function StationFinderScreen({ navigation }) {\n  const { stations, isOnline, loading } = useData();\n  const [viewMode, setViewMode] = useState('list'); // 'list' or 'map'\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  const [userLocation, setUserLocation] = useState(null);\n  const [filteredStations, setFilteredStations] = useState([]);\n  const [loadingLocation, setLoadingLocation] = useState(false);\n\n  useEffect(() => {\n    getUserLocation();\n  }, []);\n\n  useEffect(() => {\n    filterStations();\n  }, [stations, searchQuery, selectedFilter]);\n\n  const getUserLocation = async () => {\n    try {\n      setLoadingLocation(true);\n      const location = await stationService.getCurrentLocation();\n      setUserLocation(location);\n    } catch (error) {\n      console.error('Error getting location:', error);\n      Alert.alert(\n        'Location Error',\n        'Could not get your current location. Showing all stations.',\n        [{ text: 'OK' }]\n      );\n    } finally {\n      setLoadingLocation(false);\n    }\n  };\n\n  const filterStations = () => {\n    let filtered = stations;\n\n    // Filter by search query\n    if (searchQuery) {\n      filtered = filtered.filter(station =>\n        station.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        station.address.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // Filter by type\n    if (selectedFilter !== 'all') {\n      filtered = filtered.filter(station =>\n        station.station_type === selectedFilter || station.station_type === 'both'\n      );\n    }\n\n    // Add distance if user location is available\n    if (userLocation) {\n      filtered = filtered.map(station => ({\n        ...station,\n        distance: stationService.calculateDistance(\n          userLocation.latitude,\n          userLocation.longitude,\n          parseFloat(station.latitude),\n          parseFloat(station.longitude)\n        )\n      })).sort((a, b) => a.distance - b.distance);\n    }\n\n    setFilteredStations(filtered);\n  };\n\n  const getStationIcon = (stationType) => {\n    switch (stationType) {\n      case 'swap':\n        return 'swap-horizontal-circle';\n      case 'charge':\n        return 'battery-charging-full';\n      case 'both':\n        return 'battery-plus';\n      default:\n        return 'location-on';\n    }\n  };\n\n  const getAvailabilityColor = (available, total) => {\n    const ratio = available / total;\n    if (ratio > 0.5) return colors.success;\n    if (ratio > 0.2) return colors.warning;\n    return colors.error;\n  };\n\n  const renderStationCard = ({ item: station }) => (\n    <Card style={styles.stationCard}>\n      <TouchableOpacity\n        onPress={() => navigation.navigate('StationDetail', { station })}\n      >\n        <Card.Content>\n          <View style={styles.stationHeader}>\n            <View style={styles.stationInfo}>\n              <Text style={styles.stationName}>{station.name}</Text>\n              <Text style={styles.stationAddress}>{station.address}</Text>\n              {station.distance && (\n                <Text style={styles.stationDistance}>\n                  {station.distance.toFixed(1)} km away\n                </Text>\n              )}\n            </View>\n            <Icon\n              name={getStationIcon(station.station_type)}\n              size={32}\n              color={colors.primary}\n            />\n          </View>\n\n          <View style={styles.stationDetails}>\n            <View style={styles.availabilityContainer}>\n              <Text style={styles.availabilityLabel}>Available Batteries:</Text>\n              <Text\n                style={[\n                  styles.availabilityCount,\n                  { color: getAvailabilityColor(station.available_batteries, station.total_slots) }\n                ]}\n              >\n                {station.available_batteries}/{station.total_slots}\n              </Text>\n            </View>\n\n            <View style={styles.chipContainer}>\n              <Chip\n                mode=\"outlined\"\n                compact\n                style={[styles.typeChip, { borderColor: colors.primary }]}\n              >\n                {station.station_type.toUpperCase()}\n              </Chip>\n              {station.accepts_plastic && (\n                <Chip\n                  mode=\"outlined\"\n                  compact\n                  icon=\"recycling\"\n                  style={[styles.typeChip, { borderColor: colors.success }]}\n                >\n                  Plastic\n                </Chip>\n              )}\n              {station.self_service && (\n                <Chip\n                  mode=\"outlined\"\n                  compact\n                  icon=\"android\"\n                  style={[styles.typeChip, { borderColor: colors.info }]}\n                >\n                  Self-Service\n                </Chip>\n              )}\n            </View>\n          </View>\n        </Card.Content>\n      </TouchableOpacity>\n    </Card>\n  );\n\n  const renderMapView = () => (\n    <MapView\n      provider={PROVIDER_GOOGLE}\n      style={styles.map}\n      region={{\n        latitude: userLocation?.latitude || -1.286389, // Nairobi default\n        longitude: userLocation?.longitude || 36.817223,\n        latitudeDelta: 0.05,\n        longitudeDelta: 0.05,\n      }}\n      showsUserLocation={true}\n      showsMyLocationButton={true}\n    >\n      {filteredStations.map((station) => (\n        <Marker\n          key={station.id}\n          coordinate={{\n            latitude: parseFloat(station.latitude),\n            longitude: parseFloat(station.longitude),\n          }}\n          title={station.name}\n          description={`${station.available_batteries}/${station.total_slots} batteries available`}\n          onPress={() => navigation.navigate('StationDetail', { station })}\n        >\n          <View style={styles.markerContainer}>\n            <Icon\n              name={getStationIcon(station.station_type)}\n              size={24}\n              color={colors.primary}\n            />\n          </View>\n        </Marker>\n      ))}\n    </MapView>\n  );\n\n  const renderFilters = () => (\n    <View style={styles.filtersContainer}>\n      <TouchableOpacity\n        style={[\n          styles.filterChip,\n          selectedFilter === 'all' && styles.filterChipActive\n        ]}\n        onPress={() => setSelectedFilter('all')}\n      >\n        <Text style={[\n          styles.filterText,\n          selectedFilter === 'all' && styles.filterTextActive\n        ]}>\n          All\n        </Text>\n      </TouchableOpacity>\n\n      <TouchableOpacity\n        style={[\n          styles.filterChip,\n          selectedFilter === 'swap' && styles.filterChipActive\n        ]}\n        onPress={() => setSelectedFilter('swap')}\n      >\n        <Text style={[\n          styles.filterText,\n          selectedFilter === 'swap' && styles.filterTextActive\n        ]}>\n          Swap Only\n        </Text>\n      </TouchableOpacity>\n\n      <TouchableOpacity\n        style={[\n          styles.filterChip,\n          selectedFilter === 'charge' && styles.filterChipActive\n        ]}\n        onPress={() => setSelectedFilter('charge')}\n      >\n        <Text style={[\n          styles.filterText,\n          selectedFilter === 'charge' && styles.filterTextActive\n        ]}>\n          Charge Only\n        </Text>\n      </TouchableOpacity>\n    </View>\n  );\n\n  if (loading) {\n    return (\n      <View style={styles.centered}>\n        <ActivityIndicator size=\"large\" color={colors.primary} />\n        <Text style={styles.loadingText}>Loading stations...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Search Bar */}\n      <Searchbar\n        placeholder=\"Search stations...\"\n        onChangeText={setSearchQuery}\n        value={searchQuery}\n        style={styles.searchBar}\n      />\n\n      {/* Filters */}\n      {renderFilters()}\n\n      {/* View Toggle */}\n      <View style={styles.viewToggle}>\n        <TouchableOpacity\n          style={[\n            styles.toggleButton,\n            viewMode === 'list' && styles.toggleButtonActive\n          ]}\n          onPress={() => setViewMode('list')}\n        >\n          <Icon name=\"list\" size={20} color={viewMode === 'list' ? 'white' : colors.primary} />\n          <Text style={[\n            styles.toggleText,\n            viewMode === 'list' && styles.toggleTextActive\n          ]}>\n            List\n          </Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[\n            styles.toggleButton,\n            viewMode === 'map' && styles.toggleButtonActive\n          ]}\n          onPress={() => setViewMode('map')}\n        >\n          <Icon name=\"map\" size={20} color={viewMode === 'map' ? 'white' : colors.primary} />\n          <Text style={[\n            styles.toggleText,\n            viewMode === 'map' && styles.toggleTextActive\n          ]}>\n            Map\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Content */}\n      {viewMode === 'list' ? (\n        <FlatList\n          data={filteredStations}\n          renderItem={renderStationCard}\n          keyExtractor={(item) => item.id}\n          style={styles.stationsList}\n          showsVerticalScrollIndicator={false}\n          ListEmptyComponent={\n            <View style={styles.emptyContainer}>\n              <Icon name=\"location-off\" size={48} color={colors.textSecondary} />\n              <Text style={styles.emptyText}>No stations found</Text>\n              <Text style={styles.emptySubtext}>\n                {!isOnline \n                  ? 'You are offline. Showing cached stations only.'\n                  : 'Try adjusting your search or filters.'\n                }\n              </Text>\n            </View>\n          }\n        />\n      ) : (\n        renderMapView()\n      )}\n\n      {/* Refresh FAB */}\n      <FAB\n        style={styles.refreshFab}\n        icon=\"refresh\"\n        onPress={getUserLocation}\n        loading={loadingLocation}\n        small\n      />\n\n      {/* Results Counter */}\n      <View style={styles.resultsCounter}>\n        <Text style={styles.resultsText}>\n          {filteredStations.length} station{filteredStations.length !== 1 ? 's' : ''} found\n        </Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  centered: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    ...typography.body,\n    marginTop: spacing.md,\n    color: colors.textSecondary,\n  },\n  searchBar: {\n    margin: spacing.md,\n    backgroundColor: colors.surface,\n  },\n  filtersContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: spacing.md,\n    paddingBottom: spacing.sm,\n    gap: spacing.sm,\n  },\n  filterChip: {\n    paddingHorizontal: spacing.md,\n    paddingVertical: spacing.sm,\n    backgroundColor: colors.surface,\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: colors.border,\n  },\n  filterChipActive: {\n    backgroundColor: colors.primary,\n    borderColor: colors.primary,\n  },\n  filterText: {\n    ...typography.caption,\n    color: colors.text,\n  },\n  filterTextActive: {\n    color: 'white',\n  },\n  viewToggle: {\n    flexDirection: 'row',\n    margin: spacing.md,\n    backgroundColor: colors.surface,\n    borderRadius: 8,\n    padding: 4,\n  },\n  toggleButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: spacing.sm,\n    borderRadius: 6,\n    gap: spacing.xs,\n  },\n  toggleButtonActive: {\n    backgroundColor: colors.primary,\n  },\n  toggleText: {\n    ...typography.caption,\n    color: colors.primary,\n  },\n  toggleTextActive: {\n    color: 'white',\n  },\n  stationsList: {\n    flex: 1,\n    paddingHorizontal: spacing.md,\n  },\n  stationCard: {\n    marginBottom: spacing.md,\n    backgroundColor: colors.surface,\n  },\n  stationHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: spacing.md,\n  },\n  stationInfo: {\n    flex: 1,\n  },\n  stationName: {\n    ...typography.h3,\n    marginBottom: spacing.xs,\n  },\n  stationAddress: {\n    ...typography.body,\n    color: colors.textSecondary,\n    marginBottom: spacing.xs,\n  },\n  stationDistance: {\n    ...typography.caption,\n    color: colors.primary,\n    fontWeight: '600',\n  },\n  stationDetails: {\n    gap: spacing.sm,\n  },\n  availabilityContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  availabilityLabel: {\n    ...typography.body,\n  },\n  availabilityCount: {\n    ...typography.h3,\n    fontWeight: 'bold',\n  },\n  chipContainer: {\n    flexDirection: 'row',\n    gap: spacing.sm,\n  },\n  typeChip: {\n    height: 28,\n  },\n  map: {\n    flex: 1,\n  },\n  markerContainer: {\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: spacing.sm,\n    borderWidth: 2,\n    borderColor: colors.primary,\n  },\n  refreshFab: {\n    position: 'absolute',\n    margin: spacing.md,\n    right: 0,\n    top: height * 0.3,\n    backgroundColor: colors.primary,\n  },\n  resultsCounter: {\n    position: 'absolute',\n    bottom: spacing.md,\n    left: spacing.md,\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n    paddingHorizontal: spacing.md,\n    paddingVertical: spacing.sm,\n    borderRadius: 20,\n  },\n  resultsText: {\n    ...typography.caption,\n    color: 'white',\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: spacing.xxl,\n  },\n  emptyText: {\n    ...typography.h3,\n    marginTop: spacing.md,\n    marginBottom: spacing.sm,\n    color: colors.textSecondary,\n  },\n  emptySubtext: {\n    ...typography.body,\n    textAlign: 'center',\n    color: colors.textSecondary,\n    paddingHorizontal: spacing.xl,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}