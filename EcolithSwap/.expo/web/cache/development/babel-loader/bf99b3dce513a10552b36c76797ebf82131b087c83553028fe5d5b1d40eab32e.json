{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport AppNavigator from \"./src/navigation/AppNavigator\";\nimport { AuthProvider } from \"./src/contexts/AuthContext\";\nimport { DataProvider } from \"./src/contexts/DataContext\";\nimport { theme } from \"./src/utils/theme\";\nimport { initializeDatabase } from \"./src/services/database\";\nimport { initializeSupabase } from \"./src/services/supabase\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nSplashScreen.preventAutoHideAsync();\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    appIsReady = _useState2[0],\n    setAppIsReady = _useState2[1];\n  useEffect(function () {\n    function prepare() {\n      return _prepare.apply(this, arguments);\n    }\n    function _prepare() {\n      _prepare = _asyncToGenerator(function* () {\n        try {\n          yield Font.loadAsync({\n            'Roboto-Regular': require(\"./assets/fonts/Roboto-Regular.ttf\"),\n            'Roboto-Bold': require(\"./assets/fonts/Roboto-Bold.ttf\")\n          });\n          yield initializeDatabase();\n          yield initializeSupabase();\n          yield new Promise(function (resolve) {\n            return setTimeout(resolve, 2000);\n          });\n        } catch (e) {\n          console.warn(e);\n        } finally {\n          setAppIsReady(true);\n        }\n      });\n      return _prepare.apply(this, arguments);\n    }\n    prepare();\n  }, []);\n  var onLayoutRootView = React.useCallback(_asyncToGenerator(function* () {\n    if (appIsReady) {\n      yield SplashScreen.hideAsync();\n    }\n  }), [appIsReady]);\n  if (!appIsReady) {\n    return null;\n  }\n  return _jsx(SafeAreaProvider, {\n    onLayout: onLayoutRootView,\n    children: _jsx(PaperProvider, {\n      theme: theme,\n      children: _jsx(AuthProvider, {\n        children: _jsx(DataProvider, {\n          children: _jsxs(NavigationContainer, {\n            children: [_jsx(StatusBar, {\n              barStyle: \"dark-content\",\n              backgroundColor: \"#ffffff\",\n              translucent: Platform.OS === 'android'\n            }), _jsx(AppNavigator, {})]\n          })\n        })\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n});","map":{"version":3,"names":["React","useEffect","useState","StyleSheet","Platform","StatusBar","NavigationContainer","SafeAreaProvider","Provider","PaperProvider","Font","SplashScreen","AppNavigator","AuthProvider","DataProvider","theme","initializeDatabase","initializeSupabase","jsx","_jsx","jsxs","_jsxs","preventAutoHideAsync","App","_useState","_useState2","_slicedToArray","appIsReady","setAppIsReady","prepare","_prepare","apply","arguments","_asyncToGenerator","loadAsync","require","Promise","resolve","setTimeout","e","console","warn","onLayoutRootView","useCallback","hideAsync","onLayout","children","barStyle","backgroundColor","translucent","OS","styles","create","container","flex"],"sources":["C:/Users/User/Desktop/Ecolith Promps/V3/EcolithSwap/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { StyleSheet, Platform, StatusBar } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\n\nimport AppNavigator from './src/navigation/AppNavigator';\nimport { AuthProvider } from './src/contexts/AuthContext';\nimport { DataProvider } from './src/contexts/DataContext';\nimport { theme } from './src/utils/theme';\nimport { initializeDatabase } from './src/services/database';\nimport { initializeSupabase } from './src/services/supabase';\n\n// Prevent the splash screen from auto-hiding before asset loading is complete\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Pre-load fonts, make any API calls you need here\n        await Font.loadAsync({\n          'Roboto-Regular': require('./assets/fonts/Roboto-Regular.ttf'),\n          'Roboto-Bold': require('./assets/fonts/Roboto-Bold.ttf'),\n        });\n\n        // Initialize local database\n        await initializeDatabase();\n        \n        // Initialize Supabase\n        await initializeSupabase();\n        \n        // Artificially delay for demo purposes\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = React.useCallback(async () => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <SafeAreaProvider onLayout={onLayoutRootView}>\n      <PaperProvider theme={theme}>\n        <AuthProvider>\n          <DataProvider>\n            <NavigationContainer>\n              <StatusBar \n                barStyle=\"dark-content\" \n                backgroundColor=\"#ffffff\" \n                translucent={Platform.OS === 'android'} \n              />\n              <AppNavigator />\n            </NavigationContainer>\n          </DataProvider>\n        </AuthProvider>\n      </PaperProvider>\n    </SafeAreaProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}